plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.61" apply false
    id "org.jetbrains.kotlin.kapt" version "1.3.61" apply false
    id "org.jetbrains.kotlin.plugin.allopen" version "1.3.61" apply false
    id "com.github.johnrengelman.shadow" version "5.2.0"
    id "application"
    id "org.jlleitschuh.gradle.ktlint" version "9.2.1" apply false
}

allprojects {

    version "0.1"
    group "com.github.ikkun2501"

    repositories {
        mavenCentral()
        maven { url "https://jcenter.bintray.com" }
    }

    // 環境ごとに読む込む設定ファイルを切り替える
    // 未設定の場合は、開発環境（dev）を読み込む
    if (!hasProperty('env')) {
        ext.env = 'dev'
    }


    apply from: "${rootDir}/env/${env}.gradle"

    apply plugin: "org.jlleitschuh.gradle.ktlint"
    apply plugin: "org.jetbrains.kotlin.jvm"
    apply plugin: "org.jetbrains.kotlin.kapt"
    apply plugin: "org.jetbrains.kotlin.plugin.allopen"

    ktlint {
        additionalEditorconfigFile = file("${rootDir}/.editorconfig")
        ignoreFailures = true
        version = "0.36.0"
        reporters {
            reporter "plain"
            reporter "checkstyle"
        }
    }
}



configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    implementation project(":api")
    implementation project(":domain")
    implementation project(":infrastructure")

    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-security-jwt"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut.configuration:micronaut-jdbc-hikari"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "javax.annotation:javax.annotation-api"
    implementation "io.swagger.core.v3:swagger-annotations"

    // DB
    runtime 'io.micronaut.configuration:micronaut-jdbc-hikari'
    implementation 'io.micronaut.configuration:micronaut-jooq'
    implementation "org.jooq:jooq-codegen:${jooqVersion}"
    implementation "org.jooq:jooq-meta:${jooqVersion}"
    implementation "mysql:mysql-connector-java:8.0.18"
    implementation 'io.micronaut:micronaut-spring'
    runtime 'org.springframework:spring-jdbc'

    kapt platform("io.micronaut:micronaut-bom:$micronautVersion")
    kapt "io.micronaut:micronaut-inject-java"
    implementation "io.micronaut:micronaut-inject-java"
    kapt "io.micronaut:micronaut-validation"
    kaptTest platform("io.micronaut:micronaut-bom:$micronautVersion")
    kaptTest "io.micronaut:micronaut-inject-java"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin:2.9.8"
    runtimeOnly "ch.qos.logback:logback-classic:1.2.3"
    testImplementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    testImplementation "io.mockk:mockk:1.9.3"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    testImplementation "org.jooq:jooq:${jooqVersion}"

    // test
    testImplementation "com.ninja-squad:DbSetup:2.1.0"
    testImplementation "com.ninja-squad:DbSetup-kotlin:2.1.0"
}

test.classpath += configurations.developmentOnly

mainClassName = "com.ikkun2501.bookmanagement.Application"

test {
    useJUnitPlatform()
}

allOpen {
    annotation("io.micronaut.aop.Around")
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

